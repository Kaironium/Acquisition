#!/usr/bin/env python3
from __future__ import print_function, division
import h5py
import numpy as np
import sys
import csv
import os
import ROOT

# DEFAULT VALUES FOR SPE FIT:
D_OFFSET = 0
D_LAMBDA = 1
D_SPE_CHARGE = 0.8
D_NOISE_SPREAD = 0.01
D_SPE_CHARGE_SPREAD = 0
D_ZERO_PEAK_SPREAD = 0.4

def iqr(h):
    pass
    h = ROOT.TH1F('h_iqr', 'h_iqr', 10000, -6, 6)
    h.FillRandom('gaus', 500000)
    l = None
    r = None
    total = h.GetEntries()
    i = 0
    n = h.GetBinContent(i)
    while n / total < 0.25:
        i += 1
        n += h.GetBinContent(i)
    high_prob = n / total
    n -= h.GetBinContent(i)
    i -= 1
    low_prob = n / total
    l = (((0.25 - low_prob) / (high_prob - low_prob)) * h.GetBinWidth(i)) + h.GetBinLowEdge(i)
    while n / total < 0.75:
        i += 1
        n += h.GetBinContent(i)
    high_prob = n / total
    n -= h.GetBinContent(i)
    i -= 1
    low_prob = n / total
    r = (((0.75 - low_prob) / (high_prob - low_prob)) * h.GetBinWidth(i)) + h.GetBinLowEdge(i)
    return r-l

def average_distance_from(val, h):
    d2 = 0
    for i in range(h.GetMaximumBin() + 2):
        d2 += (val - h.GetXaxis().GetBinCenter(i))**2 * h.GetBinContent(i)
    return np.sqrt(d2)

def save_as_csv(data_type, value, value_err, channel):
    with open ('temp_data.csv', 'a') as file:
        headers = [
            'Data Type',
            'Channel',
            'Charge',
            'Err Abs'
            ]
        writer = csv.DictWriter(file, headers)
        if os.stat('temp_data.csv').st_size == 0:
            writer.writeheader()
        writer.writerow({
            'Data Type': data_type,
            'Channel': channel,
            'Charge': value,
            'Err Abs': value_err
        })

def remove_bad_peaks(h, x_pos, win):
    """
    At each value (`a`) in `x_pos`, fits a gaussian to `h` in the window `(a - win, a + win)`.
    If the mean of the fitted gaussian is less than or equal to `win * 0.25` away from `a`, then `a` is called a good peak.
    
    Returns an array of all the good peaks in `x_pos`.
    """
    rm = []
    for i in range(len(x_pos)):
        ge = ROOT.TF1("ge", 'gaus', x_pos[i] - win, x_pos[i] + win)
        ge.SetLineColor(3)
        if i == 0:
            r = h.Fit(ge, 'SRQ')
        else:
            r = h.Fit(ge, 'SRQ+')
        print(f'Peak {i} difference: {np.abs(x_pos[i] - ge.GetParameter(1))}')
        if np.abs(x_pos[i] - ge.GetParameter(1)) > win * 0.25:
            rm.append(i) 
    x_pos = np.delete(x_pos, rm)
    return x_pos

def analyze_filter_data(h, f_h):
    """
    Fits the filtered charge integral histogram `f_h` with a gaussian. `h` is the unfiltered histogram.
    

    Returns the mean and standard devidation (in this order) of this gaussian as a tuple.
    """
    if f_h == None:
        return (D_OFFSET, D_NOISE_SPREAD, D_ZERO_PEAK_SPREAD)
    else:
        filter_fit = ROOT.TF1('filter_fit', 'gaus', f_h.GetMean() - 2*f_h.GetStdDev(), f_h.GetMean() + 2*f_h.GetStdDev())
        f_h.Fit(filter_fit, 'SRQ0')
        offset = filter_fit.GetParameter(1)
        noise_spread = filter_fit.GetParameter(2)
        
        win = max(0.3, 20*noise_spread)
        raw_fit = ROOT.TF1('raw_fit', 'gaus', offset - win, offset + win)
        raw_fit.SetParameter(1, offset)
        h.Fit(raw_fit, 'SRQ')
        offset = raw_fit.GetParameter(1)
        raw_spread = raw_fit.GetParameter(2)
        return (offset, noise_spread, raw_spread)

def peaks(h, width=4, height=0.05):
    spec = ROOT.TSpectrum()
    highest_peak = None
    n_pks = spec.Search(h, width, "nobackground", height)               
    x_pos = spec.GetPositionX()
    x_pos = np.array([x_pos[i] for i in range(n_pks)])
    if len(x_pos) != 0:
        highest_peak = x_pos[0]
    ind = np.argsort(x_pos)
    x_pos = x_pos[ind]
    return (x_pos, highest_peak)
    # print(f'All peaks: {x_pos}')
    # x_pos = remove_bad_peaks(h, x_pos, 0.5)
    # print(f'Good peaks: {x_pos}')

def get_bin_num(h, val):
    x_axis = h.GetXaxis()
    return x_axis.FindBin(val)

if __name__ == '__main__':
    from argparse import ArgumentParser
    import matplotlib.pyplot as plt

    parser = ArgumentParser(description='Fit SPE and sodium charge histograms')
    parser.add_argument('filenames',nargs='+',help='input filenames (ROOT format)')
    parser.add_argument('--sodium', default=False, action='store_true', help='flag to indicate data is from a sodium source')
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    parser.add_argument('--BV', type=int,default=42, help='Bias Voltage input')
    #parser.add_argument('--peakper', type=double, default=0, help='Direct change of maximum percentage change from maximum peak')
    parser.add_argument('--pdf', default=False, action='store_true', help='Save the fit canvas as pdf')
    parser.add_argument('--ObjKeep', type=int,default=2,  help='Number of objects to fit')
    # parser.add_argument('--SPE_FLL', default=-0.1, type=float, help='Left limit on the spe fit')
    # parser.add_argument('--SPE_FLR', default=-0.1, type=float, help='Right limit on the spe fit')
    parser.add_argument('--NA_GF', default=50, type=float, help='Right limit on the spe fit')
    parser.add_argument('--chi2', default=False, action='store_true', help='Save the ndof and chi2 value of the fit to csv')

    args = parser.parse_args()
    
    
    canvas_count = 1

    for filename in args.filenames:
        f = ROOT.TFile(filename,"UPDATE")
        keycount=0

        raw_histograms = {}
        filtered_histograms = {}
        for key in f.GetListOfKeys():
            #print("***KEYPRINT")
            #print(key)
            #print(key.GetTitle())
            if (keycount>0):
                if(key.GetTitle()==keyold.GetTitle()):
                   # print("EQUAL")
                    continue
            keycount+=1
            keyold=key
            #if keycount>2:
            #    break

            #if keycount>args.ObjKeep:# Only gets channel 1
            #    break
                # Argument to delete all previous fits. Not working, related to TF1 class?
                # Each time the code executes 2 new keys are created in the file.
                #h.Reset("ICESM")

            h = key.ReadObj()

            if h.ClassName() != 'TH1F' and h.ClassName() != 'TH1D':
                continue

            if h.GetEntries() <= 1000:
                print('<= 1000 entries; skipping fit')
                continue

            if h.GetName().startswith('f_'):
                filtered_histograms[h.GetName()] = h
                keycount -= 1
            else:
                raw_histograms[h.GetName()] = (h, keycount)
        
        for histogram in raw_histograms:
            h = raw_histograms[histogram][0]
            keycount = raw_histograms[histogram][1]
            

            print(h.GetName())
            if args.sodium:
                # Peak searching using the TSpectrum class. See ROOT
                # documentation for details.
                # https://root.cern.ch/root/htmldoc/guides/spectrum/Spectrum.html#processing-and-visualization-functions

                # *** depending on the overvoltage the peak dimension with respect to the noise makes changes needed on the second value. A more efficient way would be to create a bisection and stop it when it detects only the 2 biggest peaks.
                #The number of found peaks and their positions are written into the members fNpeaks and fPositionX
                #Search 	( 	const TH1 *  	hin,
	        #Double_t  	sigma = 2,
		#Option_t *  	option = "",
		#Double_t  	threshold = 0.05 #Peaks with  amplitude < th*Amax are discarded. If too small -> detects peaks after the 511 peak. The code right now detects the last peak (that doesn't have a huge width) as the 511 peak. Other option is to iterate through the y positions and keep always the latest peak with an increase over the previous ones? first derivative with respect to max/min closest to zero 	
                h.GetListOfFunctions().Clear()
                spec = ROOT.TSpectrum()
                if(args.BV==42):
                    n_pks = spec.Search(h, 1, "", 0.01)
                    #n_pks = spec.Search(h, 1, "", 0.999)
                elif(args.BV>42):
                    n_pks = spec.Search(h, 1, "", 0.005)
                else:
                    # print("Wrong BV<42")
                    sys.exit("Wrong BV<42")


                x_pos = spec.GetPositionX()
                y_pos = spec.GetPositionY()

                x_pos = np.array([x_pos[i] for i in range(n_pks)])
                y_pos = np.array([y_pos[i] for i in range(n_pks)])
                print("Peak charge full list:")
                print(x_pos)
                ind = np.argsort(x_pos)
                x_pos = x_pos[ind]
                y_pos = y_pos[ind]
                                      
                n = len(x_pos)
                
                # peak = x_pos[-1]
               
                f1 = None
                win = 0.3 * h.GetStdDev()
                for i in range(n-1, -1, -1):
                    peak = x_pos[i]
                    if peak < x_pos[0] + 0.01*h.GetStdDev():
                        continue
                    print(f'Fitting this peak! {peak}')
                    f1 = ROOT.TF1("f1","gaus", peak-win, peak+win)
                    r = h.Fit(f1, 'ILMSR+')
                    r = r.Get()
                    if not r.IsValid():
                        continue
                    if f1.GetParameter(0) > h.GetEntries() / 200:
                        break
                if f1 == None:
                    peak = x_pos[-1]
                    f1 = ROOT.TF1("f1","gaus", peak-win, peak+win)
                    h.Fit(f1, 'ILMSR+')


                #*** Store values in txt/csv file
                print("511 peak = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))
                save_as_csv('sodium', f1.GetParameter(1), f1.GetParError(1), h.GetName())

                h.Write()
                if args.pdf:
                    print("*** Print PDF 1:")
                    c = ROOT.TCanvas("c%i" % canvas_count)
                    canvas_count += 1
                    canvas_count += 1
                    h.Draw()
                    c.Update()
                    prname=filename[:len(filename)-5]
                    c.Print("./FiguresFit/"+prname+"_Key_"+str(keycount)+".pdf")
                elif args.plot:
                    c = ROOT.TCanvas("c%i" % canvas_count)
                    canvas_count += 1
                    h.Draw()
                    c.Update()
            else:

                print("Single P.h.e:")
                n = 10
                string = "[0]*(" + "+".join(["TMath::Poisson(%i,[2])*TMath::Gaus(x-[1],[3]*%i,TMath::Sqrt([4]^2+[5]^2*%i))" % (i,i,i) for i in range(0,n)]) + ")"

                #string = "+".join(["gaus(%i)" % i for i in range(0,n*3,3)])

                print("Using the following fit string: '%s'" % string)
                # *** we could set a threshold/break to find when the Y axis /charge goes above a certain values from the smallest X to set the first value (-0.4 as of the time of this comment)
                
                f1 = ROOT.TF1("f1", string, h.GetMean() - 2 * h.GetStdDev(), h.GetMean() + 4 * h.GetStdDev())
               
                scale = h.GetEntries() * 0.075

                if f'f_{h.GetName()}' in filtered_histograms:
                    print('Using filtered data!')
                    offset, noise_spread, raw_spread = analyze_filter_data(h, filtered_histograms[f'f_{h.GetName()}'])
                else:
                    offset, noise_spread, raw_spread = analyze_filter_data(h, None)

                # `l`, short for lambda, which is the average number of PEs measured in the integration window.
                zero_peak_end = offset + 2 * raw_spread
                print(f'zero_peak_end: {zero_peak_end}')
                num_zero = h.Integral(0, get_bin_num(h, zero_peak_end))
                prob_zero = num_zero / h.GetEntries()
                l = -np.log(prob_zero)
                
                # SPE_charge = average_distance_from(offset, h) / l * 0.1
                SPE_charge = min(2, iqr(h) / l * 0.3)

                f1.SetRange(offset - raw_spread, f1.GetXmax())
                
                f1.SetParameter(0, scale)
                f1.SetParLimits(0, scale * 0.001, scale * 100)

                f1.FixParameter(1, offset)

                f1.SetParameter(2, l)

                f1.SetParameter(3, SPE_charge)
                f1.SetParLimits(3, 0, 5)

                f1.FixParameter(4, raw_spread)
                f1.SetParLimits(4, 0.05, 0.5)
                
                f1.FixParameter(5, D_SPE_CHARGE_SPREAD)


                # if len(x_pos) >= 1:
                #     if len(x_pos) == 1:
                #         f1.FixParameter(1, float(x_pos))  
                #         f1.SetRange(f1.GetParameter(1) - h.GetStdDev() * 0.5, f1.GetXmax()) 
                #     else:
                #         f1.FixParameter(1, float(x_pos[0]))  
                #         f1.SetRange(f1.GetParameter(1) - h.GetStdDev() * 0.5, float(x_pos[-1]) + h.GetStdDev() * 0.5) 
                # if len(x_pos) > 1:
                #     found_SPE_peak = True
                #     f1.FixParameter(3, float(x_pos[1]) - f1.GetParameter(1))
                # if not found_SPE_peak:
                #     f1.SetParameter(3,0.8)                
                #     f1.SetParLimits(3,0.1,5.)
                # if len(x_pos) == 0:
                #     f1.SetParameter(1, -0.08)
                #     f1.SetParLimits(1,-1,1)

                #for j, i in enumerate(range(0,n*3,3)):
                #    print(i)
                #    f1.SetParameter(i,y_pos[j])
                #    f1.SetParameter(i+1,x_pos[j])
                #    f1.FixParameter(i+1,x_pos[j])
                #    f1.SetParameter(i+2,0.02)
                #    f1.FixParameter(i+2,0.02)

                #r = h.Fit(f1, 'ILMSRN+')
                for i in range(6):
                    print(f'[{i}]: {f1.GetParameter(i)}')
                
                r = h.Fit(f1, 'SRB+')
                f1.SetRange(f1.GetParameter(1) - h.GetStdDev(), f1.GetXmax()) 
                for i in range(6):
                    f1.ReleaseParameter(i) 
                    f1.SetParameter(i, f1.GetParameter(i))
                
                f1.SetParLimits(1, f1.GetParameter(1) - 0.25, f1.GetParameter(1) + 0.5) 
                f1.SetParLimits(2, min(0, f1.GetParameter(2) - 1), f1.GetParameter(2) + 1) 
                f1.SetParLimits(3, min(0, f1.GetParameter(3) - 0.5), f1.GetParameter(3) + 0.5) 
                f1.SetParLimits(4, 0, f1.GetParameter(4) + 2) 
                f1.SetParLimits(5, 0, f1.GetParameter(5) + 2) 



                f1.SetLineColor(3)
                r = h.Fit(f1, 'SR+')
                
                #*** Store parameter p3 in csv/txt + print in screen only that one to avoid errors 
                
                #for j, i in enumerate(range(0,n*3,3)):
                #    print(i)
                #    f1.ReleaseParameter(i)
                #    f1.ReleaseParameter(i+1)
                #    f1.ReleaseParameter(i+2)

                #r = h.Fit(f1, 'ILMSR+')
                if args.chi2:
                    with open('chi2_fit_data.csv', 'a') as csv_file:
                        headers = [
                            'channel',
                            'ndof',
                            'chi2',
                            'prob',
                            'filename'
                        ]
                        writer = csv.DictWriter(csv_file, headers)
                        if os.stat('chi2_fit_data.csv').st_size == 0:
                            writer.writeheader()
                        writer.writerow({
                            'channel': h.GetName(),
                            'ndof': f1.GetNDF(),
                            'chi2': f1.GetChisquare(),
                            'prob': f1.GetProb(),
                            'filename': filename
                        })
                        print(f1.GetProb())
                        print(f1.GetChisquare())
                
                r = r.Get()
                if not r.IsValid():
                    print("Fit error!")
                    # continue

                #print("peak 1 = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))
                #if n > 1:
                #    print("peak 2 = %.4f +/- %.4f" % (f1.GetParameter(4), f1.GetParError(4)))
                
                save_as_csv('SPE', f1.GetParameter(3), f1.GetParError(3), h.GetName())

                h.GetXaxis().SetRangeUser(-4, 6)
                h.Write()
                filtered_histograms[f'f_{h.GetName()}'].Write()

                #print(args.plot)
                #print(args.pdf)
                if args.plot:
                    # c2 = ROOT.TCanvas("c%i" % canvas_count)
                    # canvas_count += 1
                    # filtered_histograms[f'f_{h.GetName()}'].Draw()
                    # c2.Update()
                    c = ROOT.TCanvas(f"c{canvas_count}")
                    canvas_count += 1
                    h.Draw()
                    c.Update()
                if args.pdf:
                    print("***Print to PDF 2:")
                    c = ROOT.TCanvas("c%i" % canvas_count)
                    canvas_count += 1
                    h.Draw()
                    c.Update()
                    prname=filename[:len(filename)-5]
                    c.Print("./FiguresFit/"+prname+"_Key_"+str(keycount)+".pdf")
                    
        if args.plot:
            input()
        f.Close()
