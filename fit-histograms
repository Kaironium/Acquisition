#!/usr/bin/env python3
from __future__ import print_function, division
import h5py
import numpy as np

if __name__ == '__main__':
    from argparse import ArgumentParser
    import ROOT
    import matplotlib.pyplot as plt

    parser = ArgumentParser(description='Fit SPE and sodium charge histograms')
    parser.add_argument('filenames',nargs='+',help='input filenames (ROOT format)')
    parser.add_argument('--sodium', default=False, action='store_true', help='flag to indicate data is from a sodium source')
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    args = parser.parse_args()

    canvas_count = 1

    for filename in args.filenames:
        f = ROOT.TFile(filename,"UPDATE")
        for key in f.GetListOfKeys():
            h = key.ReadObj()

            if h.ClassName() != 'TH1F' and h.ClassName() != 'TH1D':
                continue

            print(h.GetName())

            if args.sodium:
                # Peak searching using the TSpectrum class. See ROOT
                # documentation for details.
                # https://root.cern.ch/root/htmldoc/guides/spectrum/Spectrum.html#processing-and-visualization-functions

                spec = ROOT.TSpectrum()
                n_pks = spec.Search(h, 10, "", 0.5)
                x_pos = spec.GetPositionX()
                y_pos = spec.GetPositionY()

                x_pos = np.array([x_pos[i] for i in range(n_pks)])
                y_pos = np.array([y_pos[i] for i in range(n_pks)])

                ind = np.argsort(x_pos)
                x_pos = x_pos[ind]
                y_pos = y_pos[ind]
                                      
                n = len(x_pos)

                peak = x_pos[-1]

                f1 = ROOT.TF1("f1","gaus",x_pos[-1]-np.sqrt(x_pos[-1]),x_pos[-1]+np.sqrt(x_pos[-1]))

                r = h.Fit(f1, 'ILMSR+')

                r = r.Get()

                if not r.IsValid():
                    print("Fit error!")
                    continue

                print("511 peak = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))

                h.Write()
                if args.plot:
                    c = ROOT.TCanvas("c%i" % canvas_count)
                    canvas_count += 1
                    h.Draw()
                    c.Update()
            else:
                spec = ROOT.TSpectrum()
                n_pks = spec.Search(h, 0.03)
                x_pos = spec.GetPositionX()
                y_pos = spec.GetPositionY()

                x_pos = np.array([x_pos[i] for i in range(n_pks)])
                y_pos = np.array([y_pos[i] for i in range(n_pks)])

                ind = np.argsort(x_pos)
                x_pos = x_pos[ind]
                y_pos = y_pos[ind]
                                      
                n = len(x_pos)

                print("Found %i peaks" % n)

                string = "+".join(["gaus(%i)" % i for i in range(0,n*3,3)])

                print("Using the following fit string: '%s'" % string)

                f1 = ROOT.TF1("f1",string,x_pos[0]-0.1,x_pos[-1]+0.03)
                for j, i in enumerate(range(0,n*3,3)):
                    print(i)
                    f1.SetParameter(i,y_pos[j])
                    f1.SetParameter(i+1,x_pos[j])
                    f1.FixParameter(i+1,x_pos[j])
                    f1.SetParameter(i+2,0.02)
                    f1.FixParameter(i+2,0.02)

                r = h.Fit(f1, 'ILMSRN+')

                for j, i in enumerate(range(0,n*3,3)):
                    print(i)
                    f1.ReleaseParameter(i)
                    f1.ReleaseParameter(i+1)
                    f1.ReleaseParameter(i+2)

                r = h.Fit(f1, 'ILMSR+')

                r = r.Get()

                if not r.IsValid():
                    print("Fit error!")
                    continue

                print("peak 1 = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))
                if n > 1:
                    print("peak 2 = %.4f +/- %.4f" % (f1.GetParameter(4), f1.GetParError(4)))

                h.Write()
                if args.plot:
                    c = ROOT.TCanvas("c%i" % canvas_count)
                    canvas_count += 1
                    h.Draw()
                    c.Update()

        if args.plot:
            input()
        f.Close()
