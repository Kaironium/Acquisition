#!/usr/bin/env python3
from __future__ import print_function, division
import h5py
import numpy as np
import pandas as pd
from scipy import signal

def iqr(x):
    return np.percentile(x,75) - np.percentile(x,25)

def get_times(x, data, baseline=10):
    """
    Returns the times at which the waveforms in `x` cross 40% of their minimum
    value.
    """
    data = np.asarray(data)
    # Get the first 10 ns of every waveform to calculate the noise level
    noise = iqr(data[:,np.where(x < x[0] + baseline)[0]])
    # Get events with a pulse
    pulses = np.min(data,axis=-1) < -noise*5
    # Select events with pulses. If there are no matches (which might be the
    # case for the triggering channel), then don't apply the selection.
    if np.count_nonzero(pulses):
        data = data[pulses]
    argmin = np.argmin(data,axis=-1)
    threshold = 0.4*data[np.arange(data.shape[0]),argmin]
    return x[data.shape[1]-np.argmax(((np.arange(data.shape[1]) < argmin[:,np.newaxis]) & (data > threshold[:,np.newaxis]))[:,::-1],axis=-1)-1]

def get_spe_window(x, get_window_lower, integration_time=100, rewind=50):
    """
    Returns the indicies over which the SPE analysis should be integrated.

    `get_window_bounds` is the  tuple returned by `get_window`.
    `rewind` is the time between the upper bound of SPE analysis integration, and the average time at which the waveforms in `x` cross 40% of their minimum value.
    `integration_time` and `rewind` are in time units, not indexes.
    """

    # Find time-to-index conversion to find `a`
    time_gaps = [x[i+1]-x[i] for i in range(len(x) - 1)]
    avg_time_per_index = sum(time_gaps) / len(time_gaps)

    b = get_window_lower - (rewind // avg_time_per_index)
    a = b - (integration_time // avg_time_per_index)
    a = int(a)
    b = int(b)
    if b <= 0:
        raise ValueError('Rewind time is too long')
    if a < 0:
        print('Integration time is too long. Increasing lower bound to be within acceptable range.')
        a = 0
    return (a,b)


def get_window(x, data, left=1, right=10):
    """
    Returns the indices start and stop over which you should integrate the
    waveforms in `x`. The window is found by calculating the median hit time
    for all pulses in `x` and then going back 10 ns and forward 125 ns for sodium and 10 ns otherwise.
    """
    data = np.asarray(data)
    t = get_times(x,data)
    mean_hit_time = np.median(t)
    a, b = np.searchsorted(x,[mean_hit_time-left,mean_hit_time+right])
    if a < 0:
        a = 0
    if b > len(x) - 1:
        b = len(x) - 1
    return a, b

def integrate(x, data, a, b):
    """
    Integrate all waveforms in `data` with times `x`.
    """
    
    # i = v/r
    # divide by 50 ohms to convert to a charge
    return -np.trapz(data[:,a:b],x=x[a:b])*1000/50.0

def get_bins(x):
    """
    Returns bins for the data `x` using the Freedman Diaconis rule. See
    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule.
    
    The equation below returns bins using said rule. A smaller bin value than this was chosen after finetuning for better fitting results.
    bin_width = 2*iqr(x)/(len(x)**(1/3.0))
    """
    
    bin_width = 0.5*iqr(x)/(len(x)**(1/3.0))
    return np.arange(np.min(x),np.max(x),bin_width)

def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield (i,i + n)

def convert_data(f, channel, start, stop):
    if 'yinc' in dict(f[channel].attrs):
        x = f[channel].attrs['xorg'] + np.linspace(0,f[channel].attrs['xinc']*f[channel].attrs['points'],int(f[channel].attrs['points']))

        if True: # ':WAVeform:FORMat' in dict(f['settings'].attrs) and f['settings'].attrs[':WAVeform:FORMat'] != 'ASC':
            # convert word values -> voltages if the data was saved in a non-ascii format
            y = f[channel][start:stop]*f[channel].attrs['yinc'] + f[channel].attrs['yorg']
        else:
            y = f[channel][start:stop]
    else:
        # In older versions of the code, I stored xorg, xinc, etc.
        # in the main HDF5 group and not on a per channel basis
        x = f.attrs['xorg'] + np.linspace(0,f.attrs['xinc']*f.attrs['points'],int(f.attrs['points']))

        if ':WAVeform:FORMat' in dict(f['settings'].attrs) and f['settings'].attrs[':WAVeform:FORMat'] != 'ASC':
            # convert word values -> voltages if the data was saved in a non-ascii format
            y = f[channel][start:stop]*f.attrs['yinc'] + f.attrs['yorg']
        else:
            y = f[channel][start:stop]

    return x*1e9, y

def filter_SPE(time, y):
    filter_order = 2
    nyquist = (0.5 * (time[1] - time[0]))**(-1)
    cutoff = 5**(-1)  # Cut off frequency for the filter measured in inverse nanoseconds
    b, a = signal.butter(filter_order, min(1, cutoff/nyquist), btype='highpass', output='ba')
    # sos = signal.butter(filter_order, min(1, cutoff/nyquist), btype='highpass', output='sos')
    filter_data = signal.lfilter(b, a, y)
    return filter_data

if __name__ == '__main__':
    from argparse import ArgumentParser
    import ROOT
    import matplotlib.pyplot as plt

    parser = ArgumentParser(description='Analyze data from the Agilent scope')
    parser.add_argument('filenames',nargs='+',help='input filenames (hdf5 format)')
    parser.add_argument('-o','--output', default=None, help='output file name', required=True)
    parser.add_argument('--sodium', default=False, action='store_true', help='flag to indicate data is from a sodium source')
    parser.add_argument('--laser', default=False, action='store_true', help='flag to indicate data is from a laser source')
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    parser.add_argument('--chunks', default=10000, type=int, help='number of waveforms to process at a time')
    parser.add_argument('--pdf', default=False, action='store_true', help='prints pdfs')
    parser.add_argument('--IT', default=300, type=float, help='integration time for SPE analysis')
    parser.add_argument('--crosstalk', required=True, help='Channel numbers for crosstalk comparison')
    parser.add_argument('--r', default=50, type=float, help='time between upper bound of SPE analysis and lower bound of 511 analysis')

    args = parser.parse_args()

    charge = {}
    f_charge = {}
    for filename in args.filenames:
        with h5py.File(filename) as f:
            ch1 = args.crosstalk[0]
            ch2 = args.crosstalk[1]
            if ch2 not in f or ch2 not in f:
                print('Unrecognized crosstalk channel')
                sys.exit(1)

            ###########
            # Add crosstalk analysis below:
            ###########






            for channel in f:
                if channel == 'settings':
                    continue

                N = len(f[channel])

                for i in range(0, N, args.chunks):
                    x, y = convert_data(f,channel,i,i+args.chunks)

                    # Removed `if i == 0:` that initialized `a` and `b`, as well as contained the `y -= ...` statements because the offset should(?) be done for every chunk
                    if args.sodium:
                        a, b = get_window(x,y,left=50,right=300)
                        y -= np.median(y[:,x < x[0] + 100],axis=-1)[:,np.newaxis]
                        if channel in charge:
                            charge[channel] = np.concatenate((charge[channel],integrate(x,y, a, b)))
                        else:
                            charge[channel] = integrate(x,y, a, b)
                    else:
                        # b = get_window(x,y,left=50,right=300)[0]
                        a, b = get_spe_window(x, 10000, integration_time=200, rewind=0)
                        a += 2500
                        b += 2500
                        y -= np.median(y[:,x < x[0] + 100])
                        filter_y = filter_SPE(x, y)
                        no_SPE_trials = np.min(y[:, x < x[0] + 100], axis=-1) > -5 * iqr(filter_y[:, np.logical_and(x >= x[100], x < x[100] + 100)].flatten())
                        y -= np.median(y[no_SPE_trials][:,x < x[0] + 100])
                        if channel in charge:
                            charge[channel] = np.concatenate((charge[channel],integrate(x,y, a, b)))
                            f_charge[channel] = np.concatenate((f_charge[channel], integrate(x, filter_y, a, b))) 
                        else:
                            charge[channel] = integrate(x,y, a, b)
                            f_charge[channel] = integrate(x, filter_y, a, b) 
                    
                if args.plot or args.pdf:
                    plt.figure()
                    plt.subplot(2,1,1)
                    plt.plot(x,y[:100].T)
                    plt.xlabel("Time (ns)")
                    plt.ylabel("Voltage (V)")
                    plt.axvline(x[a])
                    plt.axvline(x[b])
                    plt.subplot(2,1,2)
                    plt.plot(x,np.median(y,axis=0))
                    plt.xlabel("Time (ns)")
                    plt.ylabel("Voltage (V)")
                    plt.axvline(x[a])
                    plt.axvline(x[b])
                    plt.suptitle(channel)
                if args.pdf:
                    prname=filename[:len(filename)-5]
                    #print("PDF printing")
                    plt.savefig("./FiguresAnalysis/"+prname+"_"+str(channel)+"_TimeVolt"+".pdf")
                
                # Plotting the filtered voltage signal. Doesn't have to be included in the final draft of this code.
                # if args.plot or args.pdf:
                #     plt.figure()
                #     plt.subplot(2,1,1)
                #     plt.plot(x,filter_y[:100].T)
                #     plt.xlabel("Time (ns)")
                #     plt.ylabel("Voltage (V)")
                #     plt.axvline(x[a])
                #     plt.axvline(x[b])
                #     plt.subplot(2,1,2)
                #     plt.plot(x,np.median(filter_y,axis=0))
                #     plt.xlabel("Time (ns)")
                #     plt.ylabel("Voltage (V)")
                #     plt.axvline(x[a])
                #     plt.axvline(x[b])
                #     plt.suptitle(channel)



    f = ROOT.TFile(args.output,"recreate")
    for channel in charge:
        bins = get_bins(charge[channel])
        h = ROOT.TH1D(channel,"Charge Integral for %s" % channel,len(bins),bins[0],bins[-1])
        for x in charge[channel]:
            h.Fill(x)
        h.GetXaxis().SetTitle("Charge (pC)")
        # h.GetXaxis().SetRange(-4, 4)
        
        if args.plot or args.pdf:
            plt.figure()
            plt.hist(charge[channel],bins=bins,histtype='step',label=channel)
            plt.xlabel("Charge (pC)")
            plt.legend()
        if args.pdf:
            #print("PDF printing")
            #print("FILENAME:")
            #print(filename[1:10])
            #print(len(filename))
            #figname=filename[:len[filename]-6]
            prname=filename[:len(filename)-5]
            plt.savefig("./FiguresAnalysis/"+prname+"_"+str(channel)+".pdf")
        h.Write()
    # f.Close()

    # The prefix `f_` will be used to denote objects that correspond to filtered data.
    # f_f = ROOT.TFile('filtered_charge_data.root', 'recreate')
    for f_channel in f_charge:
        f_bins = get_bins(f_charge[f_channel])
        f_h = ROOT.TH1D(f'f_{f_channel}', "Filtered Charge Integral for %s" % f_channel, len(f_bins), f_bins[0], f_bins[-1])
        for x in f_charge[channel]:
            f_h.Fill(x)
        f_h.GetXaxis().SetTitle('Charge (pC)')
        if args.plot or args.pdf:
            plt.figure()
            plt.hist(f_charge[f_channel], bins=f_bins, histtype='step', label=f_channel)
            plt.xlabel('Charge (pC)')
            plt.legend()
        f_h.Write()
    # f_f.Close()
    f.Close()

    if args.plot:
        plt.show()
