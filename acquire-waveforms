#!/usr/bin/env python
from __future__ import print_function
import time

SETTINGS = [\
    ':TIMebase:RANGe',
    ':ACQuire:SRATe:ANALog',
    ':TIMebase:POSition',
    ':ACQuire:MODE',
    ':ACQuire:INTerpolate',
    ':CHANnel1:SCALe',
    ':CHANnel2:SCALe',
    ':CHANnel3:SCALe',
    ':CHANnel4:SCALe',
    ':CHANnel1:OFFSet',
    ':CHANnel2:OFFSet',
    ':CHANnel3:OFFSet',
    ':CHANnel4:OFFSet',
    ':ACQuire:INTerpolate',
    ':TRIGger:MODE',
    ':TRIGger:EDGE:SOURce',
    ':TRIGger:LEVel',
    ':TRIGger:EDGE:SLOPe',
]

def get_settings(dpo):
    """
    Get all the current settings of the scope and return them as a dictionary
    of key, value pairs. Most of the settings are simple key, value pairs which
    indicate the setting and the value. We have one hack where since the
    ":TRIGger:LEVel" command requires a channel argument we store the key as
    ":TRIGger:LEVel CHANnel1," so that we can use the same simple method of setting
    the value on the scope by sending the command "key value".
    """
    values = {}
    for setting in SETTINGS:
        if setting == ':TRIGger:LEVel':
            for channel in ['CHANnel%i' % i for i in range(1,5)] + ['AUX']:
                values["%s %s," % (setting,channel)] = dpo.query('%s? %s' % (setting,channel))
        else:
            values[setting] = dpo.query('%s?' % setting)
    return values

def set_settings(dpo, settings):
    """
    Set the settings in the dictionary `settings` on the scope. Most of the
    settings are simple key, value pairs but some have a more complicated
    format for the key (see get_settings()).
    """
    for key, value in settings.iteritems():
        dpo.write('%s %s' % (key, value))

def is_done(dpo):
    """
    Returns True if the scope is done completing the current operation.
    """
    return int(dpo.query("*OPC?")) == 1

def wait_till_done(dpo):
    """
    Waits until the scope is done completing the current operation.
    """
    while not is_done(dpo):
        time.sleep(0.1)

if __name__ == '__main__':
    import sys
    import os
    import pyvisa as visa
    from itertools import count
    import numpy as np
    import h5py
    from argparse import ArgumentParser

    parser = ArgumentParser(description='Take data from the Agilent scope')
    parser.add_argument('-n','--numEvents', type=int, default=500, help='number of events')
    parser.add_argument('--timeout', type=int, default=None, help='timeout')
    parser.add_argument('--ip-address', help='ip address of scope', required=True)
    parser.add_argument('--settings', default=None, help='json file with settings', required=False)
    parser.add_argument('-o','--output', default=None, help='output file name', required=True)
    args = parser.parse_args()

    # establish communication with dpo
    rm = visa.ResourceManager()
    dpo = rm.open_resource('TCPIP::%s::INSTR' % args.ip_address)

    if args.timeout:
        dpo.timeout = args.timeout

    print("*idn? = %s" % dpo.query('*idn?').strip())

    settings = get_settings(dpo)

    if args.settings:
        with h5py.File(args.settings,'r') as f:
            settings = dict(f['settings'].attrs)
        print("loading settings from %s" % args.settings)
        set_settings(dpo,settings)

    wait_till_done(dpo)

    dpo.write(":ACQuire:MODE RTIMe")

    dpo.write(":system:header off")
    dpo.write(":WAVeform:format ASCII")
    xinc = float(dpo.query(":WAVeform:xincrement?"))
    xorg = float(dpo.query(":WAVeform:xorigin?"))
    points = float(dpo.query(":WAVeform:points?"))

    # x = xorg + np.linspace(0,xinc*n,n)
    f = h5py.File(args.output,"w")
    f.attrs['xinc'] = xinc
    f.attrs['xorg'] = xorg
    f.attrs['points'] = points

    f.create_group("settings")

    for key, value in settings.iteritems():
        f['settings'].attrs[key] = value

    try:
        enabled_channels = []
        for i in range(1,5):
            if int(dpo.query(":CHANnel%i:display?" % i)) == 1:
                enabled_channels.append(i)
                f.create_dataset("channel%i" % i, (args.numEvents, points), dtype='f4')

        for i in range(args.numEvents):
            if i % 10 == 0:
                print(".",end='')
                sys.stdout.flush()

            try:
                dpo.write(':digitize')
                for j in enabled_channels:
                    dpo.write(":WAVeform:source channel%i" % j)
                    f['channel%i' % j][i] = np.array(map(float,dpo.query(":WAVeform:DATA?").split(',')[:-1]))
            except visa.Error as e:
                print("\nvisa error: %s" % str(e))
                continue
        print()
    finally:
        f.close()

    set_settings(dpo,settings)

    dpo.close()
